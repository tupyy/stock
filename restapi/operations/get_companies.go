// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCompaniesHandlerFunc turns a function with the right signature into a get companies handler
type GetCompaniesHandlerFunc func(GetCompaniesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCompaniesHandlerFunc) Handle(params GetCompaniesParams) middleware.Responder {
	return fn(params)
}

// GetCompaniesHandler interface for that can handle valid get companies params
type GetCompaniesHandler interface {
	Handle(GetCompaniesParams) middleware.Responder
}

// NewGetCompanies creates a new http.Handler for the get companies operation
func NewGetCompanies(ctx *middleware.Context, handler GetCompaniesHandler) *GetCompanies {
	return &GetCompanies{Context: ctx, Handler: handler}
}

/*GetCompanies swagger:route GET /companies getCompanies

List all followed companies

*/
type GetCompanies struct {
	Context *middleware.Context
	Handler GetCompaniesHandler
}

func (o *GetCompanies) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCompaniesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCompaniesOKBody get companies o k body
//
// swagger:model GetCompaniesOKBody
type GetCompaniesOKBody struct {

	// companies
	// Required: true
	Companies []string `json:"companies"`
}

// Validate validates this get companies o k body
func (o *GetCompaniesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCompaniesOKBody) validateCompanies(formats strfmt.Registry) error {

	if err := validate.Required("getCompaniesOK"+"."+"companies", "body", o.Companies); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCompaniesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCompaniesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCompaniesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
