// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetStockParams creates a new GetStockParams object
// with the default values initialized.
func NewGetStockParams() *GetStockParams {
	var ()
	return &GetStockParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStockParamsWithTimeout creates a new GetStockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStockParamsWithTimeout(timeout time.Duration) *GetStockParams {
	var ()
	return &GetStockParams{

		timeout: timeout,
	}
}

// NewGetStockParamsWithContext creates a new GetStockParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStockParamsWithContext(ctx context.Context) *GetStockParams {
	var ()
	return &GetStockParams{

		Context: ctx,
	}
}

// NewGetStockParamsWithHTTPClient creates a new GetStockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStockParamsWithHTTPClient(client *http.Client) *GetStockParams {
	var ()
	return &GetStockParams{
		HTTPClient: client,
	}
}

/*GetStockParams contains all the parameters to send to the API endpoint
for the get stock operation typically these are written to a http.Request
*/
type GetStockParams struct {

	/*Label
	  company stock label

	*/
	Label *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get stock params
func (o *GetStockParams) WithTimeout(timeout time.Duration) *GetStockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stock params
func (o *GetStockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stock params
func (o *GetStockParams) WithContext(ctx context.Context) *GetStockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stock params
func (o *GetStockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stock params
func (o *GetStockParams) WithHTTPClient(client *http.Client) *GetStockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stock params
func (o *GetStockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLabel adds the label to the get stock params
func (o *GetStockParams) WithLabel(label *string) *GetStockParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the get stock params
func (o *GetStockParams) SetLabel(label *string) {
	o.Label = label
}

// WriteToRequest writes these params to a swagger request
func (o *GetStockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Label != nil {

		// query param label
		var qrLabel string
		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {
			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
